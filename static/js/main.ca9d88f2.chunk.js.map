{"version":3,"sources":["components/Friendstable.js","App.js","serviceWorker.js","index.js"],"names":["FriendsTable","state","friends","order","handleFirstNameSort","setState","axios","get","then","res","console","log","data","results","sortedFriends","this","sort","a","b","name","first","placeholder","className","scope","onClick","map","elem","key","last","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oTA8EeA,E,4MA1EXC,MAAQ,CACJC,QAAS,GACTC,MAAO,a,EAUXC,oBAAsB,WACO,cAArB,EAAKH,MAAME,MACX,EAAKE,SAAS,CAAEF,MAAO,eAGvB,EAAKE,SAAS,CAAEF,MAAO,e,kEAZV,IAAD,OAChBG,IAAMC,IAAI,gDAAgDC,MAAK,SAACC,GACxDC,QAAQC,IAAIF,EAAIG,MAChB,EAAKP,SAAS,CAACH,QAASO,EAAIG,KAAKC,e,+BAanC,IAAD,OACCC,EAAgBC,KAAKd,MAAMC,QAAQc,MAAK,SAACC,EAAGC,GAC9C,MAAyB,cAArB,EAAKjB,MAAME,MACPc,EAAEE,KAAKC,MAAQF,EAAEC,KAAKC,OACd,EAEHF,EAAEC,KAAKC,MAAQH,EAAEE,KAAKC,MACpB,EAGA,EAIPH,EAAEE,KAAKC,MAAQF,EAAEC,KAAKC,MACf,EAEFF,EAAEC,KAAKC,MAAQH,EAAEE,KAAKC,OACnB,EAGD,KAKnB,OAAO,6BACH,2BAAOC,YAAY,WACnB,2BAAOC,UAAU,SACb,+BACI,4BACI,wBAAIC,MAAM,OAAV,KACA,wBAAIC,QAAST,KAAKX,oBAAqBmB,MAAM,OAA7C,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,YAGR,+BACKT,EAAcW,KAAI,SAACC,GAChB,OACI,wBAAIC,IAAKD,EAAKP,KAAKC,MAAQM,EAAKP,KAAKS,MACjC,wBAAIL,MAAM,OAAV,KACA,4BAAKG,EAAKP,KAAKC,OACf,4BAAKM,EAAKP,KAAKS,iB,GAjEpBC,IAAMC,WCOlBC,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.ca9d88f2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass FriendsTable extends React.Component {\r\n    state = {\r\n        friends: [],\r\n        order: \"ascending\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"https://randomuser.me/api/?results=10&nat=us\").then((res) => {\r\n                console.log(res.data);\r\n                this.setState({friends: res.data.results});\r\n            });\r\n    }\r\n\r\n    handleFirstNameSort = () => {\r\n        if (this.state.order === \"ascending\") {\r\n            this.setState({ order: \"descending\" });\r\n        }\r\n        else {\r\n            this.setState({ order: \"ascending\" });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const sortedFriends = this.state.friends.sort((a, b) => {\r\n            if (this.state.order === \"ascending\") {\r\n                if (a.name.first < b.name.first) {\r\n                    return -1;\r\n                }\r\n                else if (b.name.first < a.name.first) {\r\n                    return 1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            }\r\n            else {\r\n                if (a.name.first < b.name.first) {\r\n                    return 1;\r\n                }\r\n                else if (b.name.first < a.name.first) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            }\r\n        })\r\n\r\n        return <div>\r\n            <input placeholder=\"Search\"></input>\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">#</th>\r\n                        <th onClick={this.handleFirstNameSort} scope=\"col\">First</th>\r\n                        <th scope=\"col\">Last</th>\r\n                        <th scope=\"col\">Handle</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {sortedFriends.map((elem) => {\r\n                        return (\r\n                            <tr key={elem.name.first + elem.name.last}>\r\n                                <th scope=\"row\">1</th>\r\n                                <td>{elem.name.first}</td>\r\n                                <td>{elem.name.last}</td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div >\r\n    }\r\n}\r\n\r\nexport default FriendsTable;","import React from 'react';\nimport './App.css';\nimport FriendsTable from \"./components/Friendstable\";\n\nfunction App() {\n  return (\n    <FriendsTable />    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}